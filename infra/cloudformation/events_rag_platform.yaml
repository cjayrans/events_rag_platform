AWSTemplateFormatVersion: "2010-09-09"
Description: "City Events RAG Platform (AOSS + Bedrock KB + Lambdas). Region us-east-1, Python 3.12."

Parameters:
  ArtifactBucketName:
    Type: String
    Default: "events-rag-artifacts-769265885190-us-east-1"
  AOSSCollectionName:
    Type: String
    Default: "city-events-collection"
  AOSSIndexName:
    Type: String
    Default: "city-events-index"
  KnowledgeBaseName:
    Type: String
    Default: "CityEventsKB"
  DataSourceName:
    Type: String
    Default: "CityEventsCustomDS"
  EventsBucket:
    Type: String
    Default: "sagemaker-us-east-1-769265885190"
  EventsKey:
    Type: String
    Default: "datasets/city_events/eventsDB_data.json"
  RetrievalFunctionName:
    Type: String
    Default: "CityEventsRetrievalFunction"
  IngestorFunctionName:
    Type: String
    Default: "CityEventsKBIngestor"
  IndexCreatorFunctionName:
    Type: String
    Default: "CityEventsIndexCreator"
  RetrievalCodeKey:
    Type: String
    Default: "lambda/retrieval.zip"
  IngestorCodeKey:
    Type: String
    Default: "lambda/kb_json_ingestor.zip"
  IndexCreatorCodeKey:
    Type: String
    Default: "lambda/aoss_index_creator.zip"

Resources:

  ### AOSS: Vector Collection ###
  AossCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: !Ref AOSSCollectionName
      Type: VECTORSEARCH
      Description: "Vector collection for city events"

  AossEncryptionPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: !Sub "${AOSSCollectionName}-encryption"
      Type: encryption
      Description: "Encryption policy"
      Policy: !Sub |
        {"Rules":[{"ResourceType":"collection","Resource":["collection/${AOSSCollectionName}"]}],"AWSOwnedKey":true}
    DependsOn: AossCollection

  AossNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: !Sub "${AOSSCollectionName}-network"
      Type: network
      Description: "Public network access (dev)"
      Policy: !Sub |
        [{"Description":"Public access for dev",
          "Rules":[{"ResourceType":"collection","Resource":["collection/${AOSSCollectionName}"]}],
          "AllowFromPublic":true}]
    DependsOn: AossCollection

  ### IAM Roles ###
  BedrockKBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${KnowledgeBaseName}-ExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: bedrock.amazonaws.com }
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Policies:
        - PolicyName: "BedrockInvokeTitanV2"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "bedrock:InvokeModel"
                Resource: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v2"
        - PolicyName: "AossDataPlaneAccessForKB"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "aoss:APIAccessAll"
                Resource: !Sub "arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*"

  IndexCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${IndexCreatorFunctionName}-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CWLogsBasic"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: "AossDescribeForEndpoint"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "aoss:BatchGetCollection"
                Resource: "*"
        - PolicyName: "AossDataPlaneAccessForIndexCreator"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "aoss:APIAccessAll"
                Resource: !Sub "arn:${AWS::Partition}:aoss:${AWS::Region}:${AWS::AccountId}:collection/*"

  KBIngestorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${IngestorFunctionName}-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CWLogsBasic"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: "S3ReadEvents"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::${EventsBucket}/${EventsKey}"
        - PolicyName: "BedrockKBIngestDocs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "bedrock:IngestKnowledgeBaseDocuments"
                Resource: "*"

  RetrievalRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${RetrievalFunctionName}-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CWLogsBasic"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: "BedrockKBRetrieve"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "bedrock:Retrieve"
                Resource: "*"

  ### AOSS Access Policy — add both principals (KB + IndexCreator) ###
  AossAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: !Sub "${AOSSCollectionName}-data-access"
      Type: data
      Description: "KB + IndexCreator data access"
      Policy: !Sub |
        [{
          "Rules": [
            { "ResourceType": "collection", "Resource": ["collection/${AOSSCollectionName}"], "Permission": ["aoss:*"] },
            { "ResourceType": "index", "Resource": ["index/${AOSSCollectionName}/*"], "Permission": ["aoss:*"] }
          ],
          "Principal": ["${BedrockKBRole.Arn}", "${IndexCreatorRole.Arn}"]
        }]
    DependsOn:
      - AossCollection
      - BedrockKBRole
      - IndexCreatorRole

  ### Lambdas (Python 3.12) ###
  IndexCreatorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref IndexCreatorFunctionName
      Handler: "index.handler"
      Runtime: "python3.12"
      Timeout: 900
      MemorySize: 512
      Role: !GetAtt IndexCreatorRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucketName
        S3Key: !Ref IndexCreatorCodeKey
      Description: "Custom resource: create+stabilize vector index in AOSS"

  KBIngestorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref IngestorFunctionName
      Handler: "index.handler"
      Runtime: "python3.12"
      Timeout: 900
      MemorySize: 512
      Role: !GetAtt KBIngestorRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucketName
        S3Key: !Ref IngestorCodeKey
      Description: "Direct ingestion from S3 JSON → Bedrock KB"
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID: !Ref KnowledgeBase
          DATA_SOURCE_ID: !GetAtt DataSource.DataSourceId
          EVENTS_S3_BUCKET: !Ref EventsBucket
          EVENTS_S3_KEY: !Ref EventsKey

  RetrievalLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref RetrievalFunctionName
      Handler: "index.handler"
      Runtime: "python3.12"
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt RetrievalRole.Arn
      Code:
        S3Bucket: !Ref ArtifactBucketName
        S3Key: !Ref RetrievalCodeKey
      Description: "RAG retrieval via Bedrock KB (Function URL, IAM-auth)"
      Environment:
        Variables:
          KNOWLEDGE_BASE_ID: !Ref KnowledgeBase
          DEFAULT_TOP_K: "5"

  RetrievalUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref RetrievalLambda
      AuthType: AWS_IAM

  ### Bedrock Knowledge Base + Data Source ###
  KnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Ref KnowledgeBaseName
      RoleArn: !GetAtt BedrockKBRole.Arn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v2"
      StorageConfiguration:
        Type: OPENSEARCH_SERVERLESS
        OpensearchServerlessConfiguration:
          CollectionArn: !GetAtt AossCollection.Arn
          VectorIndexName: !Ref AOSSIndexName
          FieldMapping:
            VectorField: "vector"
            TextField:   "text"
            MetadataField: "metadata"
    DependsOn:
      - AossAccessPolicy
      - AossNetworkPolicy
      - AossEncryptionPolicy

  DataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref KnowledgeBase
      Name: !Ref DataSourceName
      DataSourceConfiguration:
        Type: CUSTOM
    DependsOn: KnowledgeBase

  ### Custom Resource to create the actual index with mapping ###
  CreateAOSSIndex:
    Type: Custom::AossVectorIndex
    Properties:
      ServiceToken: !GetAtt IndexCreatorLambda.Arn
      CollectionName: !Ref AOSSCollectionName
      IndexName: !Ref AOSSIndexName
    DependsOn:
      - AossAccessPolicy
      - KnowledgeBase

Outputs:
  KnowledgeBaseId:
    Value: !Ref KnowledgeBase
    Description: "Bedrock KB ID"
  DataSourceId:
    Value: !GetAtt DataSource.DataSourceId
    Description: "Custom Data Source ID"
  RetrievalFunctionUrl:
    Value: !GetAtt RetrievalUrl.FunctionUrl
    Description: "Set this in multi_agent_cityinfo as EVENTS_RAG_FUNCTION_URL"
